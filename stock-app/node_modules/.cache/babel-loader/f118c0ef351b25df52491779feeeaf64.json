{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simon\\\\Desktop\\\\stock-app\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Portfolio from './Portfolio';\nimport SearchBar from './SearchBar';\nimport axios from 'axios';\n\nrequire('dotenv').config();\n\nconst App = () => {\n  const [balance, setBalance] = useState(5000);\n  const [stockToBeSearched, setStockToBeSearched] = useState('MSFT');\n  const [isSearching, setIsSearching] = useState(true);\n  const [prices, setPrices] = useState(0.0);\n  useEffect(() => {\n    let url = 'https://www.alphavantage.co/query?';\n    let func = 'TIME_SERIES_INTRADAY';\n    let symbol = stockToBeSearched;\n    let apiKey = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY;\n    let interval = '5min';\n    axios.get(`${url}function=${func}&symbol=${symbol}&interval=${interval}&apikey=${apiKey}`).then(json => {\n      return json.data['Time Series (5min)'];\n    }).then(data => {\n      setPrices(Object.entries(data)[0][1]['4. close']);\n    });\n  }, []);\n\n  const searchStock = name => {\n    console.log(name);\n    setStockToBeSearched(name);\n    setIsSearching(true);\n  };\n\n  const handlePurchase = (company, val) => {\n    console.log(val);\n    let currBal = balance;\n    setBalance(currBal - val); // Will append values to database\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, balance, React.createElement(Portfolio, {\n    stockName: stockToBeSearched,\n    searchMode: isSearching,\n    price: prices,\n    userBalance: balance,\n    handleBuy: handlePurchase,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(SearchBar, {\n    handleSearch: searchStock,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/simon/Desktop/stock-app/src/App.js"],"names":["React","useState","useEffect","Portfolio","SearchBar","axios","require","config","App","balance","setBalance","stockToBeSearched","setStockToBeSearched","isSearching","setIsSearching","prices","setPrices","url","func","symbol","apiKey","process","env","REACT_APP_ALPHA_VANTAGE_API_KEY","interval","get","then","json","data","Object","entries","searchStock","name","console","log","handlePurchase","company","val","currBal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBT,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM,CAACU,iBAAD,EAAmBC,oBAAnB,IAA2CX,QAAQ,CAAC,MAAD,CAAzD;AACA,QAAM,CAACY,WAAD,EAAaC,cAAb,IAA+Bb,QAAQ,CAAC,IAAD,CAA7C;AACA,QAAM,CAACc,MAAD,EAAQC,SAAR,IAAqBf,QAAQ,CAAC,GAAD,CAAnC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,GAAG,GAAG,oCAAV;AACA,QAAIC,IAAI,GAAG,sBAAX;AACA,QAAIC,MAAM,GAAGR,iBAAb;AACA,QAAIS,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,+BAAzB;AACA,QAAIC,QAAQ,GAAG,MAAf;AACAnB,IAAAA,KAAK,CAACoB,GAAN,CAAW,GAAER,GAAI,YAAWC,IAAK,WAAUC,MAAO,aAAYK,QAAS,WAAUJ,MAAO,EAAxF,EACCM,IADD,CACMC,IAAI,IAAI;AACV,aAAOA,IAAI,CAACC,IAAL,CAAU,oBAAV,CAAP;AACH,KAHD,EAICF,IAJD,CAIME,IAAI,IAAI;AACVZ,MAAAA,SAAS,CAACa,MAAM,CAACC,OAAP,CAAeF,IAAf,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,UAA3B,CAAD,CAAT;AACH,KAND;AAOD,GAbQ,EAaP,EAbO,CAAT;;AAeA,QAAMG,WAAW,GAAGC,IAAI,IAAI;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACApB,IAAAA,oBAAoB,CAACoB,IAAD,CAApB;AACAlB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAJD;;AAMA,QAAMqB,cAAc,GAAG,CAACC,OAAD,EAASC,GAAT,KAAiB;AACtCJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACA,QAAIC,OAAO,GAAG7B,OAAd;AACAC,IAAAA,UAAU,CAAC4B,OAAO,GAAGD,GAAX,CAAV,CAHsC,CAItC;AACD,GALD;;AAOA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5B,OADH,EAEE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEE,iBADb;AAEE,IAAA,UAAU,EAAEE,WAFd;AAGE,IAAA,KAAK,EAAEE,MAHT;AAIE,IAAA,WAAW,EAAEN,OAJf;AAKE,IAAA,SAAS,EAAE0B,cALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EASE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAEJ,WADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAeD,CAjDD;;AAmDA,eAAevB,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Portfolio from './Portfolio';\nimport SearchBar from './SearchBar';\nimport axios from 'axios';\nrequire('dotenv').config();\n\nconst App = () => {\n  const [balance,setBalance] = useState(5000);\n  const [stockToBeSearched,setStockToBeSearched] = useState('MSFT');\n  const [isSearching,setIsSearching] = useState(true);\n  const [prices,setPrices] = useState(0.0);\n\n  useEffect(() => {\n    let url = 'https://www.alphavantage.co/query?';\n    let func = 'TIME_SERIES_INTRADAY';\n    let symbol = stockToBeSearched;\n    let apiKey = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY;\n    let interval = '5min';\n    axios.get(`${url}function=${func}&symbol=${symbol}&interval=${interval}&apikey=${apiKey}`)\n    .then(json => {\n        return json.data['Time Series (5min)'];\n    })\n    .then(data => {\n        setPrices(Object.entries(data)[0][1]['4. close'])\n    });\n  },[])\n\n  const searchStock = name => {\n    console.log(name);\n    setStockToBeSearched(name);\n    setIsSearching(true);\n  }\n\n  const handlePurchase = (company,val) => {\n    console.log(val);\n    let currBal = balance;\n    setBalance(currBal - val);\n    // Will append values to database\n  }\n\n  return (\n    <React.Fragment>\n      {balance}\n      <Portfolio \n        stockName={stockToBeSearched}\n        searchMode={isSearching}\n        price={prices}\n        userBalance={balance}\n        handleBuy={handlePurchase}\n      />\n      <SearchBar \n        handleSearch={searchStock}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('cross-fetch')) : typeof define === 'function' && define.amd ? define(['cross-fetch'], factory) : (global = global || self, global.alphavantage = factory(global.fetch));\n})(this, function (fetch) {\n  'use strict';\n\n  fetch = fetch && fetch.hasOwnProperty('default') ? fetch['default'] : fetch;\n  /**\n   * Time stamp regex that AlphaVantage uses.\n   */\n\n  const timestamp = /[0-9]{4}-[0-9]{2}-[0-9]{2}( [0-9]{2}:[0-9]{2}:[0-9]{2})?/g;\n  /**\n   * Price open regex for target markets in target currency.\n   */\n\n  const cryptoMarketOpen = /1a\\. open \\(.*\\)/g;\n  /**\n   * Price high regex for target markets in target currency.\n   */\n\n  const cryptoMarketHigh = /2a\\. high \\(.*\\)/g;\n  /**\n   * Price low regex for target markets in target currency.\n   */\n\n  const cryptoMarketLow = /3a\\. low \\(.*\\)/g;\n  /**\n   * Price close regex for target markets in target currency.\n   */\n\n  const cryptoMarketClose = /4a\\. close \\(.*\\)/g;\n  /**\n   * The data keys to replace from the AlphaVantage API.\n   */\n\n  const keys = {\n    'Aroon Down': 'down',\n    'Aroon Up': 'up',\n    'Meta Data': 'meta',\n    'Realtime Currency Exchange Rate': 'rate',\n    'Rank A: Real-Time Performance': 'real',\n    'Rank B: 1 Day Performance': '1day',\n    'Rank C: 5 Day Performance': '5day',\n    'Rank D: 1 Month Performance': '1month',\n    'Rank E: 3 Month Performance': '3month',\n    'Rank F: Year-to-Date (YTD) Performance': 'ytd',\n    'Rank G: 1 Year Performance': '1year',\n    'Rank H: 3 Year Performance': '3year',\n    'Rank I: 5 Year Performance': '5year',\n    'Rank J: 10 Year Performance': '10year',\n    Information: 'information',\n    'Last Refreshed': 'updated',\n    'Time Series (1min)': 'data',\n    'Time Series (Daily)': 'data',\n    'Time Series (Digital Currency Intraday)': 'data',\n    'Time Series (Digital Currency Daily)': 'data',\n    'Time Series (Digital Currency Weekly)': 'data',\n    'Time Series (Digital Currency Monthly)': 'data',\n    'Time Series FX (Daily)': 'data',\n    'Weekly Time Series': 'data',\n    'Weekly Adjusted Time Series': 'data',\n    'Monthly Adjusted Time Series': 'data',\n    'Monthly Time Series': 'data',\n    'Stock Quotes': 'data',\n    'Global Quote': 'data',\n    'Technical Analysis: SMA': 'data',\n    'Technical Analysis: EMA': 'data',\n    'Technical Analysis: WMA': 'data',\n    'Technical Analysis: DEMA': 'data',\n    'Technical Analysis: TEMA': 'data',\n    'Technical Analysis: TRIMA': 'data',\n    'Technical Analysis: KAMA': 'data',\n    'Technical Analysis: MAMA': 'data',\n    'Technical Analysis: T3': 'data',\n    'Technical Analysis: MACD': 'data',\n    'Technical Analysis: MACDEXT': 'data',\n    'Technical Analysis: STOCH': 'data',\n    'Technical Analysis: STOCHF': 'data',\n    'Technical Analysis: RSI': 'data',\n    'Technical Analysis: STOCHRSI': 'data',\n    'Technical Analysis: WILLR': 'data',\n    'Technical Analysis: ADX': 'data',\n    'Technical Analysis: ADXR': 'data',\n    'Technical Analysis: APO': 'data',\n    'Technical Analysis: PPO': 'data',\n    'Technical Analysis: MOM': 'data',\n    'Technical Analysis: BOP': 'data',\n    'Technical Analysis: CCI': 'data',\n    'Technical Analysis: CMO': 'data',\n    'Technical Analysis: ROC': 'data',\n    'Technical Analysis: ROCR': 'data',\n    'Technical Analysis: AROON': 'data',\n    'Technical Analysis: AROONOSC': 'data',\n    'Technical Analysis: MFI': 'data',\n    'Technical Analysis: TRIX': 'data',\n    'Technical Analysis: ULTOSC': 'data',\n    'Technical Analysis: DX': 'data',\n    'Technical Analysis: MINUS_DI': 'data',\n    'Technical Analysis: PLUS_DI': 'data',\n    'Technical Analysis: MINUS_DM': 'data',\n    'Technical Analysis: PLUS_DM': 'data',\n    'Technical Analysis: BBANDS': 'data',\n    'Technical Analysis: MIDPOINT': 'data',\n    'Technical Analysis: MIDPRICE': 'data',\n    'Technical Analysis: SAR': 'data',\n    'Technical Analysis: TRANGE': 'data',\n    'Technical Analysis: ATR': 'data',\n    'Technical Analysis: NATR': 'data',\n    'Technical Analysis: Chaikin A/D': 'data',\n    'Technical Analysis: ADOSC': 'data',\n    'Technical Analysis: OBV': 'data',\n    'Technical Analysis: HT_TRENDLINE': 'data',\n    'Technical Analysis: HT_SINE': 'data',\n    'Technical Analysis: HT_TRENDMODE': 'data',\n    'Technical Analysis: HT_DCPERIOD': 'data',\n    'Technical Analysis: HT_DCPHASE': 'data',\n    'Technical Analysis: HT_PHASOR': 'data',\n    '01. symbol': 'symbol',\n    '02. open': 'open',\n    '03. high': 'high',\n    '04. low': 'low',\n    '05. price': 'price',\n    '06. volume': 'volume',\n    '07. latest trading day': 'latest_trading_day',\n    '08. previous close': 'prev_close',\n    '09. change': 'change',\n    '10. change percent': 'change_percent',\n    '1. Information': 'information',\n    '1. From_Currency Code': 'from_currency',\n    '1: Symbol': 'symbol',\n    '1. open': 'open',\n    '1b. price (USD)': 'usd',\n    '1b. open (USD)': 'usd_open',\n    '2. price': 'price',\n    '2. high': 'high',\n    '2. From_Currency Name': 'from_currency_name',\n    '2. Symbol': 'symbol',\n    '2. volume': 'volume',\n    '2: Indicator': 'indicator',\n    '2. Digital Currency Code': 'coin',\n    '2b. high (USD)': 'usd_high',\n    '3. low': 'low',\n    '3. To_Currency Code': 'to_currency',\n    '3. Last Refreshed': 'updated',\n    '3. Digital Currency Name': 'coin_name',\n    '3. market cap (USD)': 'cap',\n    '3. volume': 'volume',\n    '3b. low (USD)': 'usd_low',\n    '4. Output Size': 'size',\n    '4. To_Currency Name': 'to_currency_name',\n    '4. close': 'close',\n    '4. Interval': 'interval',\n    '4. Market Code': 'market',\n    '4. Time Zone': 'zone',\n    '4. timestamp': 'updated',\n    '4b. close (USD)': 'usd_close',\n    '5. adjusted close': 'adjusted',\n    '5. Exchange Rate': 'value',\n    '5. Market Name': 'market_name',\n    '5: Time Period': 'period',\n    '5. Output Size': 'size',\n    '5. Time Zone': 'zone',\n    '5. volume': 'volume',\n    '5: Series Type': 'series',\n    '5.1: Fast Limit': 'fastlimit',\n    '5.1: Fast Period': 'fastperiod',\n    '5.1: FastK Period': 'fastkperiod',\n    '5.1: Acceleration': 'acceleration',\n    '5.1: Time Period 1': 'timeperiod1',\n    '5.2: Slow Limit': 'slowlimit',\n    '5.2: Slow Period': 'slowperiod',\n    '5.2: SlowK Period': 'slowkperiod',\n    '5.2: FastD Period': 'fastdperiod',\n    '5.2: SlowK Period': 'slowkperiod',\n    '5.2: Maximum': 'maximum',\n    '5.2: Time Period 2': 'timeperiod2',\n    '5.3: Signal Period': 'signalperiod',\n    '5.3: SlowK MA Type': 'slowkmatype',\n    '5.3: FastD MA Type': 'fastdmatype',\n    '5.3: MA Type': 'matype',\n    '5.3: Time Period 3': 'timeperiod3',\n    '5.4: Fast MA Type': 'fastmatype',\n    '5.4: SlowD Period': 'slowdperiod',\n    '5.5: Slow MA Type': 'slowmatype',\n    '5.5: SlowD MA Type': 'slowdmatype',\n    '5.6: Signal MA Type': 'signalmatype',\n    '6. volume': 'volume',\n    '6. Time Zone': 'zone',\n    '6. market cap (USD)': 'cap',\n    '6. Last Refreshed': 'updated',\n    '6: Volume Factor (vFactor)': 'volume',\n    '6: Series Type': 'series',\n    '6. Interval': 'interval',\n    '6.1: FastK Period': 'fastkperiod',\n    '6.1: Deviation multiplier for upper band': 'nbdevup',\n    '6.2: FastD Period': 'fastdperiod',\n    '6.2: Deviation multiplier for lower band': 'nbdevdn',\n    '6.3: FastD MA Type': 'fastdmatype',\n    '6.3: MA Type': 'matype',\n    '7: Series Type': 'series',\n    '7. Time Zone': 'zone',\n    '7. Last Refreshed': 'updated',\n    '7. dividend amount': 'dividend',\n    '8. Time Zone': 'zone',\n    '8. split coefficient': 'split',\n    '1. symbol': 'symbol',\n    '2. name': 'name',\n    '3. type': 'type',\n    '4. region': 'region',\n    '5. marketOpen': 'market_open',\n    '6. marketClose': 'market_close',\n    '7. timezone': 'zone',\n    '8. currency': 'currency',\n    '9. matchScore': 'match_score'\n  };\n\n  var Util = config => {\n    /**\n     * Recursively walk the data tree and replace weird keys with a normalized set.\n     *\n     * @param {Object|String|Number} data\n     *   The data to normalize.\n     *\n     * @returns {Object|String|Number}\n     *   Normalized data.\n     */\n    const polish = data => {\n      // If this is not an object, dont recurse.\n      if (!data || typeof data !== 'object') {\n        return data;\n      } // If the data is a complex object, walk all subtrees to normalize all branches.\n\n\n      let clean = {};\n      Object.keys(data).forEach(key => {\n        key = key.toString(); // If the key is a date time string, convert it to an iso timestamp.\n\n        if (timestamp.test(key)) {\n          clean[new Date(key).toISOString()] = polish(data[key]);\n          return;\n        } // Rekey the crypto market open currency.\n\n\n        if (cryptoMarketOpen.test(key)) {\n          clean['market_open'] = polish(data[key]);\n          return;\n        } // Rekey the crypto market high currency.\n\n\n        if (cryptoMarketHigh.test(key)) {\n          clean['market_high'] = polish(data[key]);\n          return;\n        } // Rekey the crypto market low currency.\n\n\n        if (cryptoMarketLow.test(key)) {\n          clean['market_low'] = polish(data[key]);\n          return;\n        } // Rekey the crypto market close currency.\n\n\n        if (cryptoMarketClose.test(key)) {\n          clean['market_close'] = polish(data[key]);\n          return;\n        }\n\n        clean[keys[key] || key] = polish(data[key]);\n      });\n      return clean;\n    };\n    /**\n     * Util function to build the proper API url.\n     *\n     * @param {Object} params\n     *   The parameter object as type:value pairs.\n     *\n     * @returns {String}\n     *   The API url to use for a given function and input parameters.\n     */\n\n\n    const url = params => {\n      params = Object.keys(params || {}).map(type => {\n        let value = params[type];\n\n        if (value !== undefined) {\n          return `${type}=${value}`;\n        }\n\n        return undefined;\n      }).filter(value => value !== undefined).join('&');\n      return `${config.base}${params}`;\n    };\n    /**\n     * Wrapper function generator for any endpoint.\n     *\n     * @param {String} type\n     *   The API function type to use\n     *\n     * @returns {Function}\n     *   The callback function to use in the sdk.\n     */\n\n\n    const fn = type => params => fetch(url(Object.assign({}, params, {\n      function: type\n    }))).then(res => {\n      if (res.status !== 200) {\n        throw `An AlphaVantage error occurred. ${res.status}: ${res.text()}`;\n      }\n\n      return res.json();\n    }).then(data => {\n      if (data['Meta Data'] === undefined && data['Realtime Currency Exchange Rate'] === undefined && data['Global Quote'] === undefined && data['bestMatches'] === undefined) {\n        throw `An AlphaVantage error occurred. ${data['Information'] || JSON.stringify(data)}`;\n      }\n\n      return data;\n    });\n\n    return {\n      url,\n      polish,\n      fn\n    };\n  };\n\n  var Crypto = config => {\n    const util = Util(config);\n    /**\n     * Util function to get the crypto data.\n     *\n     * @param {String} fn\n     *   The enum fn available for crypto data.\n     *\n     * @returns {Function}\n     *   A data function to accept user input and returns a promise.\n     */\n\n    const series = fn => (symbol, market) => util.fn(fn)({\n      symbol,\n      market\n    });\n\n    return {\n      daily: series('DIGITAL_CURRENCY_DAILY'),\n      weekly: series('DIGITAL_CURRENCY_WEEKLY'),\n      monthly: series('DIGITAL_CURRENCY_MONTHLY')\n    };\n  };\n\n  var Data = config => {\n    const util = Util(config);\n    /**\n     * Util function to get the timeseries data.\n     *\n     * @TODO: Add input validation.\n     *\n     * @param {String} fn\n     *   The enum fn available for timeseries data.\n     *\n     * @returns {Function}\n     *   A timeseries function to accept user data that returns a promise.\n     */\n\n    const series = fn => (symbol, outputsize = 'compact', datatype = 'json', interval = '1min') => util.fn(fn)({\n      symbol,\n      interval,\n      outputsize,\n      datatype\n    });\n    /**\n     * Util function to get the symbol search data.\n     *\n     * @TODO: Add input validation.\n     *\n     * @param {String} fn\n     *   The enum fn available for search data.\n     *\n     * @returns {Function}\n     *   A search function to accept user data that returns a promise.\n     */\n\n\n    const search = fn => keywords => util.fn(fn)({\n      keywords\n    });\n\n    return {\n      intraday: series('TIME_SERIES_INTRADAY'),\n      daily: series('TIME_SERIES_DAILY'),\n      daily_adjusted: series('TIME_SERIES_DAILY_ADJUSTED'),\n      weekly: series('TIME_SERIES_WEEKLY'),\n      weekly_adjusted: series('TIME_SERIES_WEEKLY_ADJUSTED'),\n      monthly: series('TIME_SERIES_MONTHLY'),\n      monthly_adjusted: series('TIME_SERIES_MONTHLY_ADJUSTED'),\n      quote: series('GLOBAL_QUOTE'),\n      search: search('SYMBOL_SEARCH')\n    };\n  };\n\n  var Forex = config => {\n    const util = Util(config);\n    return {\n      rate: (from_currency, to_currency) => util.fn('CURRENCY_EXCHANGE_RATE')({\n        from_currency,\n        to_currency\n      })\n    };\n  };\n\n  var Performance = config => {\n    const util = Util(config);\n    return {\n      sector: util.fn('SECTOR')\n    };\n  };\n\n  var Technical = config => {\n    const util = Util(config);\n    /**\n     * A generic function generator for sma-like technicals.\n     *\n     * @param {String} fn\n     *   The sma-like function to use\n     */\n\n    const SMA_LIKE = fn => (symbol, interval, time_period, series_type) => util.fn(fn)({\n      symbol,\n      interval,\n      time_period,\n      series_type\n    });\n    /**\n     * A generic function generator for macdext-like technicals.\n     *\n     * @param {String} fn\n     *   The macdext-like function to use\n     */\n\n\n    const MACDEXT_LIKE = fn => (symbol, interval, series_type, fastperiod = 12, slowperiod = 26, signalperiod = 9, fastmatype, slowmatype, signalmatype) => util.fn(fn)({\n      symbol,\n      interval,\n      series_type,\n      fastperiod,\n      slowperiod,\n      signalperiod,\n      fastmatype,\n      slowmatype,\n      signalmatype\n    });\n    /**\n     * A generic function generator for apo-like technicals.\n     *\n     * @param {String} fn\n     *   The apo-like function to use\n     */\n\n\n    const APO_LIKE = fn => (symbol, interval, series_type, fastperiod, slowperiod, matype) => util.fn(fn)({\n      symbol,\n      interval,\n      series_type,\n      fastperiod,\n      slowperiod,\n      matype\n    });\n    /**\n     * A generic function generator for ht-like technicals.\n     *\n     * @param {String} fn\n     *   The ht-like function to use\n     */\n\n\n    const HT_LIKE = fn => (symbol, interval, series_type) => util.fn(fn)({\n      symbol,\n      interval,\n      series_type\n    });\n\n    return {\n      sma: SMA_LIKE('SMA'),\n      ema: SMA_LIKE('EMA'),\n      wma: SMA_LIKE('WMA'),\n      dema: SMA_LIKE('DEMA'),\n      tema: SMA_LIKE('TEMA'),\n      trima: SMA_LIKE('TRIMA'),\n      kama: SMA_LIKE('KAMA'),\n      mama: (symbol, interval, series_type, fastlimit = 0.01, slowlimit = 0.01) => util.fn('MAMA')({\n        symbol,\n        interval,\n        series_type,\n        fastlimit,\n        slowlimit\n      }),\n      t3: SMA_LIKE('T3'),\n      macd: MACDEXT_LIKE('MACD'),\n      macdext: MACDEXT_LIKE('MACDEXT'),\n      stoch: (symbol, interval, fastkperiod, slowkperiod, slowdperiod, slowkmatype, slowdmatype) => util.fn('STOCH')({\n        symbol,\n        interval,\n        fastkperiod,\n        slowkperiod,\n        slowdperiod,\n        slowkmatype,\n        slowdmatype\n      }),\n      stochf: (symbol, interval, fastkperiod, fastdperiod, fastdmatype) => util.fn('STOCHF')({\n        symbol,\n        interval,\n        fastkperiod,\n        fastdperiod,\n        fastdmatype\n      }),\n      rsi: SMA_LIKE('RSI'),\n      stochrsi: (symbol, interval, time_period, series_type, fastkperiod, fastdperiod, fastdmatype) => util.fn('STOCHRSI')({\n        symbol,\n        interval,\n        time_period,\n        series_type,\n        fastkperiod,\n        fastdperiod,\n        fastdmatype\n      }),\n      willr: SMA_LIKE('WILLR'),\n      adx: SMA_LIKE('ADX'),\n      adx: SMA_LIKE('ADX'),\n      adxr: SMA_LIKE('ADXR'),\n      apo: APO_LIKE('APO'),\n      ppo: APO_LIKE('PPO'),\n      mom: SMA_LIKE('MOM'),\n      bop: SMA_LIKE('BOP'),\n      cci: SMA_LIKE('CCI'),\n      cmo: SMA_LIKE('CMO'),\n      roc: SMA_LIKE('ROC'),\n      rocr: SMA_LIKE('ROCR'),\n      aroon: SMA_LIKE('AROON'),\n      aroonosc: SMA_LIKE('AROONOSC'),\n      mfi: SMA_LIKE('MFI'),\n      trix: SMA_LIKE('TRIX'),\n      ultosc: (symbol, interval, timeperiod1, timeperiod2, timeperiod3) => util.fn('ULTOSC')({\n        symbol,\n        interval,\n        timeperiod1,\n        timeperiod2,\n        timeperiod3\n      }),\n      dx: SMA_LIKE('DX'),\n      minus_di: SMA_LIKE('MINUS_DI'),\n      plus_di: SMA_LIKE('PLUS_DI'),\n      minus_dm: SMA_LIKE('MINUS_DM'),\n      plus_dm: SMA_LIKE('PLUS_DM'),\n      bbands: (symbol, interval, time_period, series_type, nbdevup, nbdevdn, matype) => util.fn('BBANDS')({\n        symbol,\n        interval,\n        time_period,\n        series_type,\n        nbdevup,\n        nbdevdn,\n        matype\n      }),\n      midpoint: SMA_LIKE('MIDPOINT'),\n      midprice: SMA_LIKE('MIDPRICE'),\n      sar: (symbol, interval, acceleration, maximum) => util.fn('SAR')({\n        symbol,\n        interval,\n        acceleration,\n        maximum\n      }),\n      trange: SMA_LIKE('TRANGE'),\n      atr: SMA_LIKE('ATR'),\n      natr: SMA_LIKE('NATR'),\n      ad: SMA_LIKE('AD'),\n      adosc: (symbol, interval, fastperiod, slowperiod) => util.fn('ADOSC')({\n        symbol,\n        interval,\n        fastperiod,\n        slowperiod\n      }),\n      obv: SMA_LIKE('OBV'),\n      ht_trendline: HT_LIKE('HT_TRENDLINE'),\n      ht_sine: HT_LIKE('HT_SINE'),\n      ht_trendmode: HT_LIKE('HT_TRENDMODE'),\n      ht_dcperiod: HT_LIKE('HT_DCPERIOD'),\n      ht_dcphase: HT_LIKE('HT_DCPHASE'),\n      ht_dcphasor: HT_LIKE('HT_PHASOR')\n    };\n  };\n  /**\n   * The Alpha Vantage core module.\n   */\n\n\n  var index = (config = {}) => {\n    // Check for API Key\n    if (config.key === undefined) {\n      throw new Error('Missing Alpha Vantage config settings: key');\n    } // Add the base url for submodules to use.\n\n\n    config.base = `https://www.alphavantage.co/query?apikey=${config.key}&`; // Include all the submodules.\n\n    return {\n      util: Util(config),\n      data: Data(config),\n      forex: Forex(config),\n      crypto: Crypto(config),\n      technical: Technical(config),\n      performance: Performance(config)\n    };\n  };\n\n  return index;\n});","map":{"version":3,"sources":["C:/Users/simon/Desktop/stock-app/node_modules/alphavantage/dist/bundle.js"],"names":["global","factory","exports","module","require","define","amd","self","alphavantage","fetch","hasOwnProperty","timestamp","cryptoMarketOpen","cryptoMarketHigh","cryptoMarketLow","cryptoMarketClose","keys","Information","Util","config","polish","data","clean","Object","forEach","key","toString","test","Date","toISOString","url","params","map","type","value","undefined","filter","join","base","fn","assign","function","then","res","status","text","json","JSON","stringify","Crypto","util","series","symbol","market","daily","weekly","monthly","Data","outputsize","datatype","interval","search","keywords","intraday","daily_adjusted","weekly_adjusted","monthly_adjusted","quote","Forex","rate","from_currency","to_currency","Performance","sector","Technical","SMA_LIKE","time_period","series_type","MACDEXT_LIKE","fastperiod","slowperiod","signalperiod","fastmatype","slowmatype","signalmatype","APO_LIKE","matype","HT_LIKE","sma","ema","wma","dema","tema","trima","kama","mama","fastlimit","slowlimit","t3","macd","macdext","stoch","fastkperiod","slowkperiod","slowdperiod","slowkmatype","slowdmatype","stochf","fastdperiod","fastdmatype","rsi","stochrsi","willr","adx","adxr","apo","ppo","mom","bop","cci","cmo","roc","rocr","aroon","aroonosc","mfi","trix","ultosc","timeperiod1","timeperiod2","timeperiod3","dx","minus_di","plus_di","minus_dm","plus_dm","bbands","nbdevup","nbdevdn","midpoint","midprice","sar","acceleration","maximum","trange","atr","natr","ad","adosc","obv","ht_trendline","ht_sine","ht_trendmode","ht_dcperiod","ht_dcphase","ht_dcphasor","index","Error","forex","crypto","technical","performance"],"mappings":"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","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('cross-fetch')) :\n  typeof define === 'function' && define.amd ? define(['cross-fetch'], factory) :\n  (global = global || self, global.alphavantage = factory(global.fetch));\n}(this, (function (fetch) { 'use strict';\n\n  fetch = fetch && fetch.hasOwnProperty('default') ? fetch['default'] : fetch;\n\n  /**\n   * Time stamp regex that AlphaVantage uses.\n   */\n  const timestamp = /[0-9]{4}-[0-9]{2}-[0-9]{2}( [0-9]{2}:[0-9]{2}:[0-9]{2})?/g;\n\n  /**\n   * Price open regex for target markets in target currency.\n   */\n  const cryptoMarketOpen = /1a\\. open \\(.*\\)/g;\n\n  /**\n   * Price high regex for target markets in target currency.\n   */\n  const cryptoMarketHigh = /2a\\. high \\(.*\\)/g;\n\n  /**\n   * Price low regex for target markets in target currency.\n   */\n  const cryptoMarketLow = /3a\\. low \\(.*\\)/g;\n\n  /**\n   * Price close regex for target markets in target currency.\n   */\n  const cryptoMarketClose = /4a\\. close \\(.*\\)/g;\n\n  /**\n   * The data keys to replace from the AlphaVantage API.\n   */\n  const keys = {\n    'Aroon Down': 'down',\n    'Aroon Up': 'up',\n    'Meta Data': 'meta',\n    'Realtime Currency Exchange Rate': 'rate',\n    'Rank A: Real-Time Performance': 'real',\n    'Rank B: 1 Day Performance': '1day',\n    'Rank C: 5 Day Performance': '5day',\n    'Rank D: 1 Month Performance': '1month',\n    'Rank E: 3 Month Performance': '3month',\n    'Rank F: Year-to-Date (YTD) Performance': 'ytd',\n    'Rank G: 1 Year Performance': '1year',\n    'Rank H: 3 Year Performance': '3year',\n    'Rank I: 5 Year Performance': '5year',\n    'Rank J: 10 Year Performance': '10year',\n    Information: 'information',\n    'Last Refreshed': 'updated',\n    'Time Series (1min)': 'data',\n    'Time Series (Daily)': 'data',\n    'Time Series (Digital Currency Intraday)': 'data',\n    'Time Series (Digital Currency Daily)': 'data',\n    'Time Series (Digital Currency Weekly)': 'data',\n    'Time Series (Digital Currency Monthly)': 'data',\n    'Time Series FX (Daily)': 'data',\n    'Weekly Time Series': 'data',\n    'Weekly Adjusted Time Series': 'data',\n    'Monthly Adjusted Time Series': 'data',\n    'Monthly Time Series': 'data',\n    'Stock Quotes': 'data',\n    'Global Quote': 'data',\n    'Technical Analysis: SMA': 'data',\n    'Technical Analysis: EMA': 'data',\n    'Technical Analysis: WMA': 'data',\n    'Technical Analysis: DEMA': 'data',\n    'Technical Analysis: TEMA': 'data',\n    'Technical Analysis: TRIMA': 'data',\n    'Technical Analysis: KAMA': 'data',\n    'Technical Analysis: MAMA': 'data',\n    'Technical Analysis: T3': 'data',\n    'Technical Analysis: MACD': 'data',\n    'Technical Analysis: MACDEXT': 'data',\n    'Technical Analysis: STOCH': 'data',\n    'Technical Analysis: STOCHF': 'data',\n    'Technical Analysis: RSI': 'data',\n    'Technical Analysis: STOCHRSI': 'data',\n    'Technical Analysis: WILLR': 'data',\n    'Technical Analysis: ADX': 'data',\n    'Technical Analysis: ADXR': 'data',\n    'Technical Analysis: APO': 'data',\n    'Technical Analysis: PPO': 'data',\n    'Technical Analysis: MOM': 'data',\n    'Technical Analysis: BOP': 'data',\n    'Technical Analysis: CCI': 'data',\n    'Technical Analysis: CMO': 'data',\n    'Technical Analysis: ROC': 'data',\n    'Technical Analysis: ROCR': 'data',\n    'Technical Analysis: AROON': 'data',\n    'Technical Analysis: AROONOSC': 'data',\n    'Technical Analysis: MFI': 'data',\n    'Technical Analysis: TRIX': 'data',\n    'Technical Analysis: ULTOSC': 'data',\n    'Technical Analysis: DX': 'data',\n    'Technical Analysis: MINUS_DI': 'data',\n    'Technical Analysis: PLUS_DI': 'data',\n    'Technical Analysis: MINUS_DM': 'data',\n    'Technical Analysis: PLUS_DM': 'data',\n    'Technical Analysis: BBANDS': 'data',\n    'Technical Analysis: MIDPOINT': 'data',\n    'Technical Analysis: MIDPRICE': 'data',\n    'Technical Analysis: SAR': 'data',\n    'Technical Analysis: TRANGE': 'data',\n    'Technical Analysis: ATR': 'data',\n    'Technical Analysis: NATR': 'data',\n    'Technical Analysis: Chaikin A/D': 'data',\n    'Technical Analysis: ADOSC': 'data',\n    'Technical Analysis: OBV': 'data',\n    'Technical Analysis: HT_TRENDLINE': 'data',\n    'Technical Analysis: HT_SINE': 'data',\n    'Technical Analysis: HT_TRENDMODE': 'data',\n    'Technical Analysis: HT_DCPERIOD': 'data',\n    'Technical Analysis: HT_DCPHASE': 'data',\n    'Technical Analysis: HT_PHASOR': 'data',\n    '01. symbol': 'symbol',\n    '02. open': 'open',\n    '03. high': 'high',\n    '04. low': 'low',\n    '05. price': 'price',\n    '06. volume': 'volume',\n    '07. latest trading day': 'latest_trading_day',\n    '08. previous close': 'prev_close',\n    '09. change': 'change',\n    '10. change percent': 'change_percent',\n    '1. Information': 'information',\n    '1. From_Currency Code': 'from_currency',\n    '1: Symbol': 'symbol',\n    '1. open': 'open',\n    '1b. price (USD)': 'usd',\n    '1b. open (USD)': 'usd_open',\n    '2. price': 'price',\n    '2. high': 'high',\n    '2. From_Currency Name': 'from_currency_name',\n    '2. Symbol': 'symbol',\n    '2. volume': 'volume',\n    '2: Indicator': 'indicator',\n    '2. Digital Currency Code': 'coin',\n    '2b. high (USD)': 'usd_high',\n    '3. low': 'low',\n    '3. To_Currency Code': 'to_currency',\n    '3. Last Refreshed': 'updated',\n    '3. Digital Currency Name': 'coin_name',\n    '3. market cap (USD)': 'cap',\n    '3. volume': 'volume',\n    '3b. low (USD)': 'usd_low',\n    '4. Output Size': 'size',\n    '4. To_Currency Name': 'to_currency_name',\n    '4. close': 'close',\n    '4. Interval': 'interval',\n    '4. Market Code': 'market',\n    '4. Time Zone': 'zone',\n    '4. timestamp': 'updated',\n    '4b. close (USD)': 'usd_close',\n    '5. adjusted close': 'adjusted',\n    '5. Exchange Rate': 'value',\n    '5. Market Name': 'market_name',\n    '5: Time Period': 'period',\n    '5. Output Size': 'size',\n    '5. Time Zone': 'zone',\n    '5. volume': 'volume',\n    '5: Series Type': 'series',\n    '5.1: Fast Limit': 'fastlimit',\n    '5.1: Fast Period': 'fastperiod',\n    '5.1: FastK Period': 'fastkperiod',\n    '5.1: Acceleration': 'acceleration',\n    '5.1: Time Period 1': 'timeperiod1',\n    '5.2: Slow Limit': 'slowlimit',\n    '5.2: Slow Period': 'slowperiod',\n    '5.2: SlowK Period': 'slowkperiod',\n    '5.2: FastD Period': 'fastdperiod',\n    '5.2: SlowK Period': 'slowkperiod',\n    '5.2: Maximum': 'maximum',\n    '5.2: Time Period 2': 'timeperiod2',\n    '5.3: Signal Period': 'signalperiod',\n    '5.3: SlowK MA Type': 'slowkmatype',\n    '5.3: FastD MA Type': 'fastdmatype',\n    '5.3: MA Type': 'matype',\n    '5.3: Time Period 3': 'timeperiod3',\n    '5.4: Fast MA Type': 'fastmatype',\n    '5.4: SlowD Period': 'slowdperiod',\n    '5.5: Slow MA Type': 'slowmatype',\n    '5.5: SlowD MA Type': 'slowdmatype',\n    '5.6: Signal MA Type': 'signalmatype',\n    '6. volume': 'volume',\n    '6. Time Zone': 'zone',\n    '6. market cap (USD)': 'cap',\n    '6. Last Refreshed': 'updated',\n    '6: Volume Factor (vFactor)': 'volume',\n    '6: Series Type': 'series',\n    '6. Interval': 'interval',\n    '6.1: FastK Period': 'fastkperiod',\n    '6.1: Deviation multiplier for upper band': 'nbdevup',\n    '6.2: FastD Period': 'fastdperiod',\n    '6.2: Deviation multiplier for lower band': 'nbdevdn',\n    '6.3: FastD MA Type': 'fastdmatype',\n    '6.3: MA Type': 'matype',\n    '7: Series Type': 'series',\n    '7. Time Zone': 'zone',\n    '7. Last Refreshed': 'updated',\n    '7. dividend amount': 'dividend',\n    '8. Time Zone': 'zone',\n    '8. split coefficient': 'split',\n    '1. symbol': 'symbol',\n    '2. name': 'name',\n    '3. type': 'type',\n    '4. region': 'region',\n    '5. marketOpen': 'market_open',\n    '6. marketClose': 'market_close',\n    '7. timezone': 'zone',\n    '8. currency': 'currency',\n    '9. matchScore': 'match_score'\n  };\n\n  var Util = config => {\n    /**\n     * Recursively walk the data tree and replace weird keys with a normalized set.\n     *\n     * @param {Object|String|Number} data\n     *   The data to normalize.\n     *\n     * @returns {Object|String|Number}\n     *   Normalized data.\n     */\n    const polish = data => {\n      // If this is not an object, dont recurse.\n      if (!data || typeof data !== 'object') {\n        return data;\n      }\n\n      // If the data is a complex object, walk all subtrees to normalize all branches.\n      let clean = {};\n      Object.keys(data).forEach(key => {\n        key = key.toString();\n\n        // If the key is a date time string, convert it to an iso timestamp.\n        if (timestamp.test(key)) {\n          clean[new Date(key).toISOString()] = polish(data[key]);\n          return;\n        }\n\n        // Rekey the crypto market open currency.\n        if (cryptoMarketOpen.test(key)) {\n          clean['market_open'] = polish(data[key]);\n          return;\n        }\n\n        // Rekey the crypto market high currency.\n        if (cryptoMarketHigh.test(key)) {\n          clean['market_high'] = polish(data[key]);\n          return;\n        }\n\n        // Rekey the crypto market low currency.\n        if (cryptoMarketLow.test(key)) {\n          clean['market_low'] = polish(data[key]);\n          return;\n        }\n\n        // Rekey the crypto market close currency.\n        if (cryptoMarketClose.test(key)) {\n          clean['market_close'] = polish(data[key]);\n          return;\n        }\n\n        clean[keys[key] || key] = polish(data[key]);\n      });\n\n      return clean;\n    };\n\n    /**\n     * Util function to build the proper API url.\n     *\n     * @param {Object} params\n     *   The parameter object as type:value pairs.\n     *\n     * @returns {String}\n     *   The API url to use for a given function and input parameters.\n     */\n    const url = params => {\n      params = Object.keys(params || {})\n        .map(type => {\n          let value = params[type];\n          if (value !== undefined) {\n            return `${type}=${value}`;\n          }\n\n          return undefined;\n        })\n        .filter(value => value !== undefined)\n        .join('&');\n\n      return `${config.base}${params}`;\n    };\n\n    /**\n     * Wrapper function generator for any endpoint.\n     *\n     * @param {String} type\n     *   The API function type to use\n     *\n     * @returns {Function}\n     *   The callback function to use in the sdk.\n     */\n    const fn = type => params =>\n      fetch(url(Object.assign({}, params, { function: type })))\n        .then(res => {\n          if (res.status !== 200) {\n            throw `An AlphaVantage error occurred. ${res.status}: ${res.text()}`;\n          }\n\n          return res.json();\n        })\n        .then(data => {\n          if (\n            data['Meta Data'] === undefined &&\n            data['Realtime Currency Exchange Rate'] === undefined &&\n            data['Global Quote'] === undefined &&\n            data['bestMatches'] === undefined\n          ) {\n            throw `An AlphaVantage error occurred. ${data['Information'] || JSON.stringify(data)}`;\n          }\n\n          return data;\n        });\n\n    return {\n      url,\n      polish,\n      fn\n    };\n  };\n\n  var Crypto = config => {\n    const util = Util(config);\n\n    /**\n     * Util function to get the crypto data.\n     *\n     * @param {String} fn\n     *   The enum fn available for crypto data.\n     *\n     * @returns {Function}\n     *   A data function to accept user input and returns a promise.\n     */\n    const series = fn => (symbol, market) =>\n      util.fn(fn)({\n        symbol,\n        market\n      });\n\n    return {\n      daily: series('DIGITAL_CURRENCY_DAILY'),\n      weekly: series('DIGITAL_CURRENCY_WEEKLY'),\n      monthly: series('DIGITAL_CURRENCY_MONTHLY')\n    };\n  };\n\n  var Data = config => {\n    const util = Util(config);\n\n    /**\n     * Util function to get the timeseries data.\n     *\n     * @TODO: Add input validation.\n     *\n     * @param {String} fn\n     *   The enum fn available for timeseries data.\n     *\n     * @returns {Function}\n     *   A timeseries function to accept user data that returns a promise.\n     */\n    const series = fn => (symbol, outputsize = 'compact', datatype = 'json', interval = '1min') =>\n      util.fn(fn)({\n        symbol,\n        interval,\n        outputsize,\n        datatype\n      });\n\n    /**\n     * Util function to get the symbol search data.\n     *\n     * @TODO: Add input validation.\n     *\n     * @param {String} fn\n     *   The enum fn available for search data.\n     *\n     * @returns {Function}\n     *   A search function to accept user data that returns a promise.\n     */\n    const search = fn => keywords =>\n      util.fn(fn)({\n        keywords\n      });\n\n    return {\n      intraday: series('TIME_SERIES_INTRADAY'),\n      daily: series('TIME_SERIES_DAILY'),\n      daily_adjusted: series('TIME_SERIES_DAILY_ADJUSTED'),\n      weekly: series('TIME_SERIES_WEEKLY'),\n      weekly_adjusted: series('TIME_SERIES_WEEKLY_ADJUSTED'),\n      monthly: series('TIME_SERIES_MONTHLY'),\n      monthly_adjusted: series('TIME_SERIES_MONTHLY_ADJUSTED'),\n      quote: series('GLOBAL_QUOTE'),\n      search: search('SYMBOL_SEARCH')\n    };\n  };\n\n  var Forex = config => {\n    const util = Util(config);\n\n    return {\n      rate: (from_currency, to_currency) => util.fn('CURRENCY_EXCHANGE_RATE')({ from_currency, to_currency })\n    };\n  };\n\n  var Performance = config => {\n    const util = Util(config);\n\n    return {\n      sector: util.fn('SECTOR')\n    };\n  };\n\n  var Technical = config => {\n    const util = Util(config);\n\n    /**\n     * A generic function generator for sma-like technicals.\n     *\n     * @param {String} fn\n     *   The sma-like function to use\n     */\n    const SMA_LIKE = fn => (symbol, interval, time_period, series_type) =>\n      util.fn(fn)({ symbol, interval, time_period, series_type });\n\n    /**\n     * A generic function generator for macdext-like technicals.\n     *\n     * @param {String} fn\n     *   The macdext-like function to use\n     */\n    const MACDEXT_LIKE = fn => (\n      symbol,\n      interval,\n      series_type,\n      fastperiod = 12,\n      slowperiod = 26,\n      signalperiod = 9,\n      fastmatype,\n      slowmatype,\n      signalmatype\n    ) =>\n      util.fn(fn)({\n        symbol,\n        interval,\n        series_type,\n        fastperiod,\n        slowperiod,\n        signalperiod,\n        fastmatype,\n        slowmatype,\n        signalmatype\n      });\n\n    /**\n     * A generic function generator for apo-like technicals.\n     *\n     * @param {String} fn\n     *   The apo-like function to use\n     */\n    const APO_LIKE = fn => (symbol, interval, series_type, fastperiod, slowperiod, matype) =>\n      util.fn(fn)({ symbol, interval, series_type, fastperiod, slowperiod, matype });\n\n    /**\n     * A generic function generator for ht-like technicals.\n     *\n     * @param {String} fn\n     *   The ht-like function to use\n     */\n    const HT_LIKE = fn => (symbol, interval, series_type) => util.fn(fn)({ symbol, interval, series_type });\n\n    return {\n      sma: SMA_LIKE('SMA'),\n      ema: SMA_LIKE('EMA'),\n      wma: SMA_LIKE('WMA'),\n      dema: SMA_LIKE('DEMA'),\n      tema: SMA_LIKE('TEMA'),\n      trima: SMA_LIKE('TRIMA'),\n      kama: SMA_LIKE('KAMA'),\n      mama: (symbol, interval, series_type, fastlimit = 0.01, slowlimit = 0.01) =>\n        util.fn('MAMA')({ symbol, interval, series_type, fastlimit, slowlimit }),\n      t3: SMA_LIKE('T3'),\n      macd: MACDEXT_LIKE('MACD'),\n      macdext: MACDEXT_LIKE('MACDEXT'),\n      stoch: (symbol, interval, fastkperiod, slowkperiod, slowdperiod, slowkmatype, slowdmatype) =>\n        util.fn('STOCH')({ symbol, interval, fastkperiod, slowkperiod, slowdperiod, slowkmatype, slowdmatype }),\n      stochf: (symbol, interval, fastkperiod, fastdperiod, fastdmatype) =>\n        util.fn('STOCHF')({ symbol, interval, fastkperiod, fastdperiod, fastdmatype }),\n      rsi: SMA_LIKE('RSI'),\n      stochrsi: (symbol, interval, time_period, series_type, fastkperiod, fastdperiod, fastdmatype) =>\n        util.fn('STOCHRSI')({ symbol, interval, time_period, series_type, fastkperiod, fastdperiod, fastdmatype }),\n      willr: SMA_LIKE('WILLR'),\n      adx: SMA_LIKE('ADX'),\n      adx: SMA_LIKE('ADX'),\n      adxr: SMA_LIKE('ADXR'),\n      apo: APO_LIKE('APO'),\n      ppo: APO_LIKE('PPO'),\n      mom: SMA_LIKE('MOM'),\n      bop: SMA_LIKE('BOP'),\n      cci: SMA_LIKE('CCI'),\n      cmo: SMA_LIKE('CMO'),\n      roc: SMA_LIKE('ROC'),\n      rocr: SMA_LIKE('ROCR'),\n      aroon: SMA_LIKE('AROON'),\n      aroonosc: SMA_LIKE('AROONOSC'),\n      mfi: SMA_LIKE('MFI'),\n      trix: SMA_LIKE('TRIX'),\n      ultosc: (symbol, interval, timeperiod1, timeperiod2, timeperiod3) =>\n        util.fn('ULTOSC')({ symbol, interval, timeperiod1, timeperiod2, timeperiod3 }),\n      dx: SMA_LIKE('DX'),\n      minus_di: SMA_LIKE('MINUS_DI'),\n      plus_di: SMA_LIKE('PLUS_DI'),\n      minus_dm: SMA_LIKE('MINUS_DM'),\n      plus_dm: SMA_LIKE('PLUS_DM'),\n      bbands: (symbol, interval, time_period, series_type, nbdevup, nbdevdn, matype) =>\n        util.fn('BBANDS')({ symbol, interval, time_period, series_type, nbdevup, nbdevdn, matype }),\n      midpoint: SMA_LIKE('MIDPOINT'),\n      midprice: SMA_LIKE('MIDPRICE'),\n      sar: (symbol, interval, acceleration, maximum) => util.fn('SAR')({ symbol, interval, acceleration, maximum }),\n      trange: SMA_LIKE('TRANGE'),\n      atr: SMA_LIKE('ATR'),\n      natr: SMA_LIKE('NATR'),\n      ad: SMA_LIKE('AD'),\n      adosc: (symbol, interval, fastperiod, slowperiod) => util.fn('ADOSC')({ symbol, interval, fastperiod, slowperiod }),\n      obv: SMA_LIKE('OBV'),\n      ht_trendline: HT_LIKE('HT_TRENDLINE'),\n      ht_sine: HT_LIKE('HT_SINE'),\n      ht_trendmode: HT_LIKE('HT_TRENDMODE'),\n      ht_dcperiod: HT_LIKE('HT_DCPERIOD'),\n      ht_dcphase: HT_LIKE('HT_DCPHASE'),\n      ht_dcphasor: HT_LIKE('HT_PHASOR')\n    };\n  };\n\n  /**\n   * The Alpha Vantage core module.\n   */\n  var index = (config = {}) => {\n    // Check for API Key\n    if (config.key === undefined) {\n      throw new Error('Missing Alpha Vantage config settings: key');\n    }\n\n    // Add the base url for submodules to use.\n    config.base = `https://www.alphavantage.co/query?apikey=${config.key}&`;\n\n    // Include all the submodules.\n    return {\n      util: Util(config),\n      data: Data(config),\n      forex: Forex(config),\n      crypto: Crypto(config),\n      technical: Technical(config),\n      performance: Performance(config)\n    };\n  };\n\n  return index;\n\n})));\n"]},"metadata":{},"sourceType":"script"}